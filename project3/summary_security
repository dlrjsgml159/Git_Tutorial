시큐리티(개별플젝, 팀플 필수)

보안영역

- 인증(Authentication) 처리 :
	현재 사용자가 누구인지 확인하는 과정으로,
	일반적인 웹애플리케이션은 아이디/암호를 이용해서 인증을 처리한다. (예. 로그인화면)

- 인가(Authorization) 처리 :
	현재 사용자가 특정대상(URL, 기능 등)을 사용(접근)할 권한이 있는지 검사한다
	
- UI 처리 : 권한이 없는 사용자가 접근했을 때, 알맞은 에러화면(403 Forbidden 에러)을 보여주거나,
			로그인폼과 같은 인증화면으로 이동시킨다
			
- 역할(role)
	/member로 시작하는 경로 : 인증된 사용자만 접근가능(관리자, 사용자 접근 가능)
	/admin로 시작하는 경로 : ROLE_ADMIN 권한을 가진 사용자만 접근 가능
	/manager로 시작하는 경로 : ROLE_MANAGER 권한을 가진 사용자만 접근 가능
	나머지 경로 : 누구나 접근 가능
	권한이 없는 사용자가 접근했을 때, 403 Forbidden 응답(권한없음)을 보여줌
	
--------------------------------------------------------------------------

- 예제> 권한
	member 로그인 -> member, home
	manager 로그인 -> manager, member, home
	admin 로그인 -> admin, manager, member, home
	
--------------------------------------------------------------------------

1. security/tiger 계정 생성
	
	system에 접속 후 생성
	
	--1. 계정생성
	--    create user <계정이름> identified by <계정암호> default tablespace users;
	create user security identified by tiger default tablespace users;

	--2. 사용자 권한 부여
	grant connect, resource to security;
	grant create view to security; -- view 생성권한 추가
	REVOKE CREATE VIEW FROM security; -- view 권한 제거 
	--3. 락 해제
	--    alter user <계정이름> account unlock;
	alter user security account unlock;
	
	테이블 생성
	
2. 플젝 생성
	spring_mvcSecurity
	
      패키지 생성
	com.spring.security
   
3. context.xml에 컨넥션을 추가 .. name="jdbc/Oracle11g_security"

	<Resource auth="Container"
    	driverClassName="oracle.jdbc.driver.OracleDriver"
   		maxActive="5"
   		maxIdle="3"
   		maxWait="1000"
   		type="javax.sql.DataSource"
   		name="jdbc/Oracle11g_security"
   		url="jdbc:oracle:thin:@localhost:1521:xe"
   		username="security"
   		password="security" 	
   	/>   	
   	
4. 한글 안깨지게 처리
	web.xml에 한글 안깨지도록 추가

	<!-- 한글 안깨지게 처리  -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping> 

5. 1) 자바 설정

	Project 우클릭 > properties > Project Facets > java를 1.8로 변경
	Runtimes 탭에서 Apache Tomcat v8.5클릭

	Project 우클릭 > properties > java Build Path탭 > Libraries 탭 > apache 톰캣 선택후 Edit 버튼
	JRE System Library default JRE(jre1.8.0_241) 선택
	
	java compiler - 1.8 버전 확인 

   2) pom.xml에 버전 설정
   https://spring.io/projects/spring-framework에서 스프링 최신 버전 확인
   
   pom.xml에 버전 반영
   
   <properties>
		<java-version>1.8</java-version>
		<org.springframework-version>5.1.8.RELEASE</org.springframework-version>
		<org.aspectj-version>1.6.10</org.aspectj-version>
		<org.slf4j-version>1.6.6</org.slf4j-version>
	</properties>
   
   aopalliance-1.0.jar 오류시 추가 ==> https://mvnrepository.com/ 에서 검색
   
   3) pom.xml에 Mybatis.jar 파일 설정
	https://mvnrepository.com/에서 4개의 라이브러리를 복사후 pom.xml에 등록하면,
	maven 중앙 repository로부터 다운로드후 빌드되어 Maven Dependencies(.m2.repository)에 저장된다
	
	<!-- MyBatis 설정 시작 --!>
	<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
	<dependency>
	    <groupId>org.mybatis</groupId>
	    <artifactId>mybatis-spring</artifactId>
	    <version>1.3.2</version>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
	<dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-jdbc</artifactId>
	    <version>5.1.8.RELEASE</version>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
	<dependency>
	    <groupId>org.mybatis</groupId>
	    <artifactId>mybatis</artifactId>
	    <version>3.4.6</version>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
	<dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-test</artifactId>
	    <version>5.1.8.RELEASE</version>
	</dependency>
	<!-- MyBatis 설정 종료 --!>
	
   4) pom.xml에 security jar 파일 설정	
	mvnrepository.com에서 각 파일을 검색해서 복사
	
	spring-security-config, spring-security-core, spring-security-taglibs, spring-security-web  	
	
	<!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-config -->
	<dependency>
	    <groupId>org.springframework.security</groupId>
	    <artifactId>spring-security-config</artifactId>
	    <version>5.2.1.RELEASE</version>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-core -->
	<dependency>
	    <groupId>org.springframework.security</groupId>
	    <artifactId>spring-security-core</artifactId>
	    <version>5.2.1.RELEASE</version>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-taglibs -->
	<dependency>
	    <groupId>org.springframework.security</groupId>
	    <artifactId>spring-security-taglibs</artifactId>
	    <version>5.2.1.RELEASE</version>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-web -->
	<dependency>
	    <groupId>org.springframework.security</groupId>
	    <artifactId>spring-security-web</artifactId>
	    <version>5.2.1.RELEASE</version>
	</dependency>
	
6. 시큐리티 권한 설정
6-1) src> main> resources> security-context.xml 생성
	작성 : src> main> resources> 우클릭 > new Spring Bean Configuration File > 파일명 : security-context.xml
	
	Namespaces탭 > security 선택 - 오른쪽 Namespace Versions에 spring-security-5.2.xsd 체크 => xml 파일에 security가 추가됨
	
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:sec="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security 
	https://www.springframework.org/schema/security/spring-security-5.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
		
	<sec:http use-expressions="true">
		<sec:intercept-url pattern="/admin/**"
			access="hasAuthority('USER_ADMIN')"/>
		<sec:intercept-url pattern="/manager/**"
			access="hasAuthority('USER_MANAGER')"/>
		<sec:intercept-url pattern="/member/**"
			access="isAuthenticated()"/>
		<sec:intercept-url pattern="/**"
			access="permitAll"/>
			
		<sec:form-login /> <!-- 시큐리티가 제공하는 로그인 페이지로 이동  -->
		<!-- <sec:form-login login-page="/user/loginForm"/> 개인 로그인 페이지로 이동 --> 
		<sec:logout />	<!-- 시큐리티가 제공하는 로그아웃 페이지로 이동  -->		
	</sec:http>
	
	<!-- 방법1. IN 메모리 방식  -->
	<sec:authentication-manager>
		<sec:authentication-provider>
			<sec:user-service>
				<!-- 시큐리티 버전이 5.0이상이면 password="{noop}s1234" -->
				<sec:user name="shin" password="{noop}s1234" 
					authorities="ROLE_USER"/>
				
				<sec:user name="lee" password="{noop}l1234" 
					authorities="ROLE_USER"/>
					
				<sec:user name="manager" password="{noop}m1234" 
					authorities="USER_MANAGER"/>
					
				<sec:user name="admin" password="{noop}a1234"
					authorities="USER_ADMIN, USER_MANAGER"/>
			</sec:user-service>
		</sec:authentication-provider>
	</sec:authentication-manager>
	
	<!-- 방법2. DB 방식 : 컨넥션 풀정보를 읽어온다  -->
</beans>

6-2) src> main> resources> security-datasource.xml 생성
	작성 : src> main> resources> 우클릭 > new Spring Bean Configuration File > 파일명 : security-datasource.xml

	security-datasource.xml에 MyBatis 설정 추가

	주의사항 : jndiName value="java:comp/env/jdbc/Oracle11g_security" (context.xmal에서 확인)

	<!-- MyBatis 설정시작  -->
	<!-- 컨넥션 풀  -->
	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="java:comp/env/jdbc/Oracle11g_security" />
		<property name="resourceRef" value="true" />
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath:mappers/**/*.xml" />
	</bean>
	
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory"/>
	</bean>
	<!-- MyBatis 설정종료  -->

6-3) 추가된 xml파일을 web.xml에 등록
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring/root-context.xml
			classpath:/security-context.xml		<!-- 1.시큐리티 설정파일 추가  -->
			classpath:/security-datasource.xml	<!-- 1.시큐리티 설정파일 추가  -->
		</param-value>
	</context-param> 
	
6-4) web.xml에 추가
	<!-- 2. 시큐리티 추가 시작  -->
	<!-- 애플리케이션의 모든 요청을 스프링 시큐리티에서 처리하도록 하는 필터  -->
	<!-- 보안 필터 체인 : 보안과 관련된 작업을 처리한다  
		- 로그인 폼을 보여주거나, 접근 권한이 없는 경우 403 Forbidden(권한없음) 상태코드를 응답
		- DelegatingFilterProxy -> FilterChainProxy -> SecurityFilterChain -> 실제 지원
	-->
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- 시큐리티 추가 종료  -->

7. Mapper 작성
	1) src> main> resources> mappers 패키지 작성 > 우클릭 new > Other > xml file > sqlMapper.xml 생성
	
	2) mybatis.org > products > 왼쪽 Mybatis3의 docs링크 클릭
		왼쪽메뉴 : configuration XML > 중간부분 > Handling Enums와 Object Factory 사이 > 맨위 세줄 복사  
		
	<!DOCTYPE mapper
       PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
       "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
	-> sqlMapper.xml에 붙여넣는다
	
	<!-- <mapper namespace="패키지명.인터페이스명"> -->
	** 주의사항 : mapper namespace를 추가안하고 실행시 에러
	<mapper namespace="">
	
	</mapper>

8. webapp/index.jsp 작성

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>
<html>
<body>
	<sec:authorize access="isAuthenticated()"> <!-- 현재 사용자가 인증된 경우  -->
		<sec:authentication property="name" />님 환영합니다. <!-- 현재 접속된 사용자의 인증정보를 보여준다  -->
	</sec:authorize>
	
	<ul>
		<li><a href="<c:url value='home/homeMain' />"> home/homeMain </a></li>
		<li><a href="<c:url value='member/memberMain' />"> member/memberMain </a></li>
		<li><a href="<c:url value='manager/managerMain' />"> manager/managerMain </a></li>
		<li><a href="<c:url value='admin/adminMain' />"> admin/adminMain </a></li>
		
		<!-- 인증된 경우에만, 즉 로그인한 경우에만 로그아웃 링크 출력  -->
		<sec:authorize access="isAuthenticated()">
			<li><a href="<c:url value='j_spring_security_logout' />"> j_spring_security_logout </a></li>
			<%-- <li><a href="<c:url value='home/logout' />"> home/logout </a></li> --%>
		</sec:authorize>
	</ul>
</body>
</html>

9. SecurityController 작성
	
	com.spring.security 폴더에 controller 패키지 작성

	@Controller
	public class SecurityController {
	
	} 
	
	각각의 jsp 작성
	
10. 실행방법 : 컨트롤러
	http://localhost/security/ 실행 => index.jsp가 실행된다
	
	/home/homeMain 클릭 => homeMain.jsp가 실행된다
	
-------------------------------------------------------
방법2. DB 방식 : 컨넥션 풀정보를 읽어온다.

	<sec:authentication-manager>
		<sec:authentication-provider>
			<!-- data-source-ref는 security-datasource.xml의 <bean name="dataSource">와 일치 -->
			<sec:jdbc-user-service data-source-ref="dataSource"/>
		</sec:authentication-provider>
	</sec:authentication-manager>

주의사항 ** security-context.xml에서 '방법1. IN 메모리 방식'은 주석처리 할 것(IN 메모리 방식이 우선순위로 실행되므로)

<테이블 생성>
-- 테이블 생성(테이블명은 users로 준다)
-- Security 계정에서 실행

-- 사용자이름-암호정보
	DROP TABLE users;
	CREATE TABLE users(
	    username    VARCHAR2(50)    PRIMARY KEY, -- 사용자이름(로그인ID)
	    password    VARCHAR2(100)   NOT NULL, -- 인증암호
	    enabled     CHAR(1)         NOT NULL -- 계정사용 가능여부(1:사용가능, 0:사용불가)
	);

-- 사용자이름-권한매핑정보
	DROP TABLE authorities;
	CREATE TABLE authorities(
	    username    VARCHAR2(50)    NOT NULL REFERENCES users(username) ON DELETE CASCADE, -- 사용자 이름
	    authority   VARCHAR2(50)    NOT NULL    -- 권한
	);

-- 사용자이름-암호정보 INSERT
-- 주의사항 : 시큐리티 버전이 5.0(실습버전 : 5.2)이상이면 password='{noop}s1234'
	INSERT INTO users(username, password, enabled) VALUES('shin', '{noop}s1234', '1');
	INSERT INTO users(username, password, enabled) VALUES('lee', '{noop}l1234', '1');
	INSERT INTO users(username, password, enabled) VALUES('kim', '{noop}k1234', '1');
	INSERT INTO users(username, password, enabled) VALUES('manager', '{noop}m1234', '1');
	INSERT INTO users(username, password, enabled) VALUES('admin', '{noop}a1234', '1');
	commit;
	select * from users;

-- 사용자이름-권한매핑정보 INSERT
-- admin 권한
	INSERT INTO authorities(username, authority) VALUES('admin', 'USER_ADMIN');
	INSERT INTO authorities(username, authority) VALUES('admin', 'USER_MANAGER');
	INSERT INTO authorities(username, authority) VALUES('admin', 'USER');
	-- manager 권한
	INSERT INTO authorities(username, authority) VALUES('manager', 'USER_MANAGER');
	INSERT INTO authorities(username, authority) VALUES('manager', 'USER');
	-- member 권한
	INSERT INTO authorities(username, authority) VALUES('shin', 'USER');
	INSERT INTO authorities(username, authority) VALUES('lee', 'USER');
	INSERT INTO authorities(username, authority) VALUES('kim', 'USER');
	commit;
	select * from authorities;


	
