스프링시큐리티 - 비밀번호 암호화

0. 스프링 플젝생성

	플젝 생성
	spring_mvcSecurity_encryptPassword
	
      패키지 생성
	com.spring.encrypt

1. context.xml .. name="jdbc/Oracle11g_encrypt"
	
	<Resource auth="Container"
    	driverClassName="oracle.jdbc.driver.OracleDriver"
   		maxActive="5"
   		maxIdle="3"
   		maxWait="1000"
   		type="javax.sql.DataSource"
   		name="jdbc/Oracle11g_encrypt"
   		url="jdbc:oracle:thin:@localhost:1521:xe"
   		username="encrypt"
   		password="encrypt" 	
   	/> 

2. 회원정보 테이블 생성

	system에 접속 후 생성
	
	--1. 계정생성
	--    create user <계정이름> identified by <계정암호> default tablespace users;
	create user encrypt identified by encrypt default tablespace users;

	--2. 사용자 권한 부여
	grant connect, resource to encrypt;
	grant create view to encrypt; -- view 생성권한 추가
	REVOKE CREATE VIEW FROM encrypt; -- view 권한 제거 
	--3. 락 해제
	--    alter user <계정이름> account unlock;
	alter user encrypt account unlock;
	
	--4. 테이블 생성
	DROP TABLE users;
	CREATE TABLE users(
	    userid      VARCHAR2(255)   NOT NULL,   -- 아이디
	    password    VARCHAR2(255)   NOT NULL,   -- 비밀번호
	    name        VARCHAR2(255)   NOT NULL,   -- 이름
	    enabled     NUMBER(1)       DEFAULT 1,  -- 사용가능여부(1:사용가능, 0:사용불가(휴면계정)
	    authority   VARCHAR2(20)    DEFAULT 'ROLE_USER',    -- 권한('ROLE_USER':일반사용자,'ROLE_ADMIN':관리자)
	    PRIMARY KEY(userid)
	);
	
	select * from tab;
	
주의사항 : 시큐리티와 같은 계정에서 작업시 기존 users, authority 테이블 모두 삭제하고 위의 테이블을 생성할 것
	
3. WEB-INF/web.xml 설정	

3-1.
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring/root-context.xml
			classpath:/security-context.xml		<!-- 1.시큐리티 설정파일 추가  -->
			classpath:/security-datasource.xml	<!-- 1.시큐리티 설정파일 추가  -->
		</param-value>
	</context-param>
	
3-2.
	<!-- 2.시큐리티 리스너 추가  -->
	<!-- 스프링 시큐리티에서 사용하는 세션 이벤트 처리 관련 리스너로서, 세션 만료 체크, 동시 로그인 제한 등의 기능 제공  -->
	<listener>
		<listener-class>org.springframework.security.web.session.HttpSessionEventPublisher</listener-class>
	</listener>
	

3-3.
	<!-- 3.한글 안깨지게 처리  -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
3-4.
	<!-- 4.시큐리티 추가 시작  -->
	<!-- 애플리케이션의 모든 요청을 스프링 시큐리티에서 처리하도록 하는 필터  -->
	<!-- 보안 필터 체인 : 보안과 관련된 작업을 처리한다  
		- 로그인 폼을 보여주거나, 접근 권한이 없는 경우 403 Forbidden(권한없음) 상태코드를 응답
		- DelegatingFilterProxy -> FilterChainProxy -> SecurityFilterChain -> 실제 지원
	-->
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- 4.시큐리티 추가 종료  -->
	
3-5.
	<!-- 5.에러처리 페이지  -->
	<error-page>
		<error-code>500</error-code>
		<location>/user/login</location>
	</error-page>
	
3-6.
	<!-- 6.세션 타임 아웃 설정(480분) -->
	<session-config>
		<session-timeout>480</session-timeout>
	</session-config>
	
4.
	1) 자바 설정
	Project 우클릭 > properties > Project Facets > java를 1.8로 변경
	Runtimes 탭에서 Apache Tomcat v8.5클릭

	Project 우클릭 > properties > java Build Path탭 > Libraries 탭 > apache 톰캣 선택후 Edit 버튼
	JRE System Library default JRE(jre1.8.0_241) 선택
	
	java compiler - 1.8 버전 확인 

   2) pom.xml에 버전 설정
   https://spring.io/projects/spring-framework에서 스프링 최신 버전 확인
   
   pom.xml에 버전 반영
   
   <properties>
		<java-version>1.8</java-version>
		<org.springframework-version>5.1.8.RELEASE</org.springframework-version>
		<org.aspectj-version>1.6.10</org.aspectj-version>
		<org.slf4j-version>1.6.6</org.slf4j-version>
	</properties>
   
   aopalliance-1.0.jar 오류시 추가 ==> https://mvnrepository.com/ 에서 검색
   
   3) pom.xml에 Mybatis.jar 파일 설정
	https://mvnrepository.com/에서 4개의 라이브러리를 복사후 pom.xml에 등록하면,
	maven 중앙 repository로부터 다운로드후 빌드되어 Maven Dependencies(.m2.repository)에 저장된다
	
	<!-- MyBatis 설정 시작 --!>
	<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
	<dependency>
	    <groupId>org.mybatis</groupId>
	    <artifactId>mybatis-spring</artifactId>
	    <version>1.3.2</version>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
	<dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-jdbc</artifactId>
	    <version>5.1.8.RELEASE</version>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
	<dependency>
	    <groupId>org.mybatis</groupId>
	    <artifactId>mybatis</artifactId>
	    <version>3.4.6</version>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
	<dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-test</artifactId>
	    <version>5.1.8.RELEASE</version>
	</dependency>
	<!-- MyBatis 설정 종료 --!>
	
   4) pom.xml에 security jar 파일 설정	
	mvnrepository.com에서 각 파일을 검색해서 복사
	
	spring-security-config, spring-security-core, spring-security-taglibs, spring-security-web  	
	
	<!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-config -->
	<dependency>
	    <groupId>org.springframework.security</groupId>
	    <artifactId>spring-security-config</artifactId>
	    <version>5.2.1.RELEASE</version>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-core -->
	<dependency>
	    <groupId>org.springframework.security</groupId>
	    <artifactId>spring-security-core</artifactId>
	    <version>5.2.1.RELEASE</version>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-taglibs -->
	<dependency>
	    <groupId>org.springframework.security</groupId>
	    <artifactId>spring-security-taglibs</artifactId>
	    <version>5.2.1.RELEASE</version>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-web -->
	<dependency>
	    <groupId>org.springframework.security</groupId>
	    <artifactId>spring-security-web</artifactId>
	    <version>5.2.1.RELEASE</version>
	</dependency>
	
5.
	src/main/webapp/WEB-INF/spring/appServlet/servlet-context.xml
	Namespaces탭 > security 선택 - 오른쪽 Namespace Versions에 spring-security-5.2.xsd 체크
	
	<!-- 시큐리티 추가 1.정적 리소스 파일  -->
	<resources mapping="/include/**" location="/WEB-INF/views/include/" />
	
	InternalResourceViewResolver, component-scan 설정
	
	<!-- 시큐리티 추가 2.@Secured 어노테이션 활성화, 사용권한 제한  -->	
	<!-- Namespaces 탭에서 security 추가  -->
	<security:global-method-security secured-annotations="enabled" />
	
6. 시큐리티 권한 설정
	src> main> resources> security-context.xml 생성
	작성 : src> main> resources> 우클릭 > new Spring Bean Configuration File > 파일명 : security-context.xml
	
	Namespaces탭 > security 선택 - 오른쪽 Namespace Versions에 spring-security-5.2.xsd 체크 => xml 파일에 security가 추가됨
	
	<?xml version="1.0" encoding="UTF-8"?>
	<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:sec="http://www.springframework.org/schema/security"
		xsi:schemaLocation="http://www.springframework.org/schema/security 
		https://www.springframework.org/schema/security/spring-security-5.2.xsd
			http://www.springframework.org/schema/beans 
			http://www.springframework.org/schema/beans/spring-beans.xsd">
			
		<!-- 주의 : 네임스페이스 security => sec로 수정  -->
		<!-- 정적 리소스 파일들에는 보안 설정을 하지 않음  -->
		<sec:http pattern="/include/**" security="none" />
		<sec:http auto-config="true" use-expressions="true" create-session="never">
		
			<!-- 관리자 영역 설정  -->
			<sec:intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')" />
				
			<!-- 권한에 관계없이 접속 가능한 영역(guest도 접속 가능) -->
			<sec:intercept-url pattern="/user/**" access="permitAll" />	
			
			<!-- 로그인한 사용자 영역  -->
			<sec:intercept-url pattern="/**" access="hasAnyRole('ROLE_USER', 'ROLE_ADMIN', 'ROLE_GUEST', 'ROLE_MANAGER')" />
			
			<!-- 로그인폼  -->
			<sec:form-login login-page="/user/login.do" 
				login-processing-url="/user/login_check.do"
				authentication-success-handler-ref="userLoginSuccessHandler"
				authentication-failure-handler-ref="userLoginFailureHandler"
				username-parameter="userid" password-parameter="password" />
				
			<sec:session-management>
				<!-- 
					max-sessions="1" => 같은 브라우저의 여러 창에서 동시접속 막기  
					expired-url="/user/login.do" => 세션 만료시 이동할 주소
					error-if-maximum-exceeded="true" => 최대 세션 초과시 에러 옵션
				-->
				<sec:concurrency-control max-sessions="1" 
					expired-url="/user/login.do"
					error-if-maximum-exceeded="true"
					/>			
			</sec:session-management>
			
			<!-- 접근 권한이 없는 경우의 코드  -->
			<sec:access-denied-handler ref="userDeniedHandler" />
				
		</sec:http>
		
		<bean id="userLoginSuccessHandler" class="com.security.encrypt.service.UserLoginSuccessHandler" />
		<bean id="userLoginFailureHandler" class="com.security.encrypt.service.UserLoginFailureHandler" />
		<bean id="userDeniedHandler" class="com.security.encrypt.service.UserDeniedHandler" />
		
		<!-- 로그인 인증을 처리하는 빈  -->
		<!-- 주의 : 에러 => UserAuthenticationService에서 sqlSession을 주입하면 에러 사라짐 -->
		<bean id="userService" class="com.security.encrypt.service.UserAuthenticationService">
			<constructor-arg name="sqlSession" ref="sqlSession" />
		</bean>
		
		<!-- 비밀번호 암호화 빈  -->
		<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" /> 
	</beans>
	
7. Mapper 작성
	1) src> main> resources> mappers 패키지 작성 > 우클릭 new > Other > xml file > sqlMapper.xml 생성
	
	2) mybatis.org > products > 왼쪽 Mybatis3의 docs링크 클릭
		왼쪽메뉴 : configuration XML > 중간부분 > Handling Enums와 Object Factory 사이 > 맨위 세줄 복사  
		
	<!DOCTYPE mapper
       PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
       "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
	-> sqlMapper.xml에 붙여넣는다
	
	<!-- <mapper namespace="패키지명.인터페이스명"> -->
	** 주의사항 : mapper namespace를 추가안하고 실행시 에러
	<mapper namespace="">
	
	</mapper>
	
8-1. 
	src> main> resources> security-datasource.xml 생성
	작성 : src> main> resources> 우클릭 > new Spring Bean Configuration File > 파일명 : security-datasource.xml

	security-datasource.xml에 MyBatis 설정 추가

	주의사항 : jndiName value="java:comp/env/jdbc/Oracle11g_encrypt" (context.xmal에서 확인)

	<!-- MyBatis 설정시작  -->
	<!-- 컨넥션 풀  -->
	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="java:comp/env/jdbc/Oracle11g_encrypt" />
		<property name="resourceRef" value="true" />
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath:mappers/**/*.xml" />
	</bean>
	
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory"/>
	</bean>
	<!-- MyBatis 설정종료  -->

8-2.
	security-datasource.xml에 트랜잭션 관리자 추가
	<!-- 트랜잭션 관리자 : @Transactional 어노테이션 추가  -->
	<!-- Namespaces 탭에서 tx 추가  -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

9. 	UserVO 작성
	
10.	dao 작성
	persistence 작성
	UserDAO
	UserDAOImpl	
	
11.	mapper 작성
	
12.	service 작성
	
13.	컨트롤러 작성
	
14.	jsp 작성
	HomeController 주석처리
	home.jsp 수정
	
15. join.jsp	
	<%--*중요* 크로스사이드 스크립팅 공격방어를 위해 스프링 시큐리티 에서는  반드시 아래값을 전달해야 에러가 발생안함
		${_csrf.~} 사용 파라미터네임과 토큰 사용
		name , value는 반드시 아래값을 사용해야함.
		모든 form 태그내에서  지정해야함. 
		
		주의 : 권한이 필요한 페이지에서의 파일 업로드시  *나는 사진 업로드에 쓸것이다*
		<form action="이동할 페이지?${_csrf.parameterName}=${_csrf.token}"enctype="multipart/form-data" method="post">
	--%>
16.  파일 업로드 시에 사용할 xml pom.xml

	<dependency>
	    <groupId>org.springframework.security</groupId>
	    <artifactId>commons-io</artifactId>
	    <version>5.2</version>
	</dependency>
=====================테스트=============================

1.http://localhost/encrypt/ 접속
	=> http://localhost/encrypt/user/login.do 이동
	
2.회원 가입 
  ------------------일반사용자 -------------------
  
  
============================================================

	
	